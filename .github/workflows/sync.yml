name: YouTube Music Scrobble Sync

on:
  schedule:
    - cron: '0 23 * * *'  # Daily at 23:00 UTC (adjust as needed)
  push:
    branches: [master] # Trigger on push to main branch
  workflow_dispatch: # Allows manual triggering from GitHub UI

jobs:
  scrobble:
    runs-on: ubuntu-latest
    environment: production # Binds to the 'production' environment for secrets and protection rules
    outputs:
      scrobble_log: ${{ steps.scrobbler.outputs.scrobble_log }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11' # Or your preferred Python version (e.g., '3.8', '3.9', '3.10')
          
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Cache scrobble database
        uses: actions/cache@v3
        with:
          path: data.db
          key: ${{ runner.os }}-scrobble-db

      - name: Run YouTube Music Scrobbler
        id: scrobbler
        env:
          LAST_FM_API: ${{ secrets.LAST_FM_API }}
          LAST_FM_API_SECRET: ${{ secrets.LAST_FM_API_SECRET }}
          YTMUSIC_COOKIE: ${{ secrets.YTMUSIC_COOKIE }}
          LASTFM_SESSION: ${{ secrets.LASTFM_SESSION }}
        run: |
          echo "Starting YouTube Music Scrobbler..."
          output=$(python start_standalone.py)
          echo "$output"
          echo "scrobble_log<<EOF" >> $GITHUB_OUTPUT
          echo "$output" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "YouTube Music Scrobbler finished."
        
  notify:
    needs: scrobble
    runs-on: ubuntu-latest
    if: failure()
    steps:
      - name: Send Discord notification
        run: |
          curl -H "Content-Type: application/json" -d '{
            "content": "YouTube Music Scrobble Sync failed!"
          }' "$DISCORD_WEBHOOK_URL"
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}

  notify_success:
    needs: scrobble
    runs-on: ubuntu-latest
    if: success()
    steps:
      - name: Send Discord notification
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
          SCROBBLE_LOG: ${{ needs.scrobble.outputs.scrobble_log }}
        run: |
          pip install requests
          python - <<EOF
import os
import requests

log = os.environ.get("SCROBBLE_LOG", "")
webhook_url = os.environ.get("DISCORD_WEBHOOK_URL")

if not webhook_url:
    print("DISCORD_WEBHOOK_URL not set. Skipping notification.")
    exit(0)

# Discord has a 2000 character limit for embed descriptions.
if len(log) > 1980:
    log = log[:1980] + "\n... (log truncated)"

payload = {
    "content": "YouTube Music Scrobble Sync succeeded!",
    "embeds": [{
        "title": "Scrobble Log",
        "description": f"```\n{log}\n```"
    }]
}

try:
    response = requests.post(webhook_url, json=payload)
    response.raise_for_status()
    print("Successfully sent Discord notification.")
except requests.exceptions.RequestException as e:
    print(f"Failed to send Discord notification: {e}")
    exit(1)
EOF